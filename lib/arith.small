
use 'lib/stack.small'
use 'lib/bool.small'



" a b => diff = (a - b)
lab arith::sub
    "function header
    cal stack::swap
    pla
    sta arith::add:b
    cal stack::swap
    pla
    sta arith::add:a

    lda arith::add:b
    pha
    cal bool::not

    lda arith::add:a
    pha
    cal arith::add

    ldi 1
    pha
    cal arith::add

    cal stack::swap
    ret



" a b => sum
lab arith::add
    "function header
    cal stack::swap
    pla
    sta arith::add:b
    cal stack::swap
    pla
    sta arith::add:a

    "sum = 0
    ldi 0
    sta arith::add:sum

    "carry = 0
    ldi 0
    sta arith::add:carry

    "repeat(16) do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do
    cal arith::add::do

    "return sum
    lda arith::add:sum
    pha
    cal stack::swap
    ret


    lab arith::add::do
        "get lsb of a
        lda arith::add:a
        pha
        ldi 1
        pha
        cal bool::and
        pla
        sta arith::add:a-bit

        "get lsb of b
        lda arith::add:b
        pha
        ldi 1
        pha
        cal bool::and
        pla
        sta arith::add:b-bit

        "shift sum
        lda arith::add:sum
        shr
        sta arith::add:sum


        "perform single bit addition
        "first half-add
        lda arith::add:a-bit
        pha
        lda arith::add:b-bit
        pha
        cal bool::xor
        pla
        sta arith::add:temp-sum

        "second
        lda arith::add:temp-sum
        pha
        lda arith::add:carry
        pha
        cal bool::xor
        pla

        jmz arith::add::do::skip-set-bit
            ldi 32768
            pha
            lda arith::add:sum
            pha
            cal bool::or
            pla
            sta arith::add:sum
        lab arith::add::do::skip-set-bit

        "and carry
        "first
        lda arith::add:a-bit
        pha
        lda arith::add:b-bit
        pha
        cal bool::and
        
        "second
        lda arith::add:temp-sum
        pha
        lda arith::add:carry
        pha
        cal bool::and

        "or them together
        cal bool::or

        "and write carry
        pla
        sta arith::add:carry


        "shift a
        lda arith::add:a
        shr
        sta arith::add:a

        "shift b
        lda arith::add:b
        shr
        sta arith::add:b

        ret












    
    



